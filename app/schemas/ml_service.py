# app/schemas/ml_service.py
import cv2
import numpy as np
from ultralytics import YOLO
import base64
from typing import List, Dict, Any
import logging

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

class ToolDetectionService:
    def __init__(self, model_path: str):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–∞ –¥–µ—Ç–µ–∫—Ü–∏–∏ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
        
        Args:
            model_path: –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É –º–æ–¥–µ–ª–∏ .pt –∏–ª–∏ .onnx
        """
        try:
            self.model = YOLO(model_path)
            logger.info(f"‚úÖ –ú–æ–¥–µ–ª—å –∑–∞–≥—Ä—É–∂–µ–Ω–∞: {model_path}")
            
            # –ö–ª–∞—Å—Å—ã –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ –∏–∑ –≤–∞—à–µ–≥–æ –¥–∞—Ç–∞—Å–µ—Ç–∞
            self.tool_classes = {
                0: "1 –û—Ç–≤–µ—Ä—Ç–∫–∞ ¬´-¬ª",
                1: "10 –ö–ª—é—á —Ä–æ–∂–∫–æ–≤—ã–π–Ω–∞–∫–∏–¥–Ω–æ–π ¬æ", 
                2: "11 –ë–æ–∫–æ—Ä–µ–∑—ã",
                3: "2 –û—Ç–≤–µ—Ä—Ç–∫–∞ ¬´+¬ª",
                4: "3 –û—Ç–≤–µ—Ä—Ç–∫–∞ –Ω–∞ —Å–º–µ—â–µ–Ω–Ω—ã–π –∫—Ä–µ—Å—Ç",
                5: "4 –ö–æ–ª–æ–≤–æ—Ä–æ—Ç",
                6: "5 –ü–∞—Å—Å–∞—Ç–∏–∂–∏ –∫–æ–Ω—Ç—Ä–æ–≤–æ—á–Ω—ã–µ",
                7: "6 –ü–∞—Å—Å–∞—Ç–∏–∂–∏",
                8: "7 –®—ç—Ä–Ω–∏—Ü–∞",
                9: "8 –†–∞–∑–≤–æ–¥–Ω–æ–π –∫–ª—é—á",
                10: "9 –û—Ç–∫—Ä—ã–≤–∞—à–∫–∞ –¥–ª—è –±–∞–Ω–æ–∫ —Å –º–∞—Å–ª–æ–º"
            }
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–æ–¥–µ–ª–∏: {e}")
            raise

    def base64_to_image(self, image_base64: str) -> np.ndarray:
        """
        –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç base64 —Å—Ç—Ä–æ–∫—É –≤ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ OpenCV
        
        Args:
            image_base64: –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ base64
            
        Returns:
            –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ numpy array
        """
        try:
            # –£–±–∏—Ä–∞–µ–º –ø—Ä–µ—Ñ–∏–∫—Å –µ—Å–ª–∏ –µ—Å—Ç—å
            if ',' in image_base64:
                image_base64 = image_base64.split(',')[1]
                
            image_data = base64.b64decode(image_base64)
            np_array = np.frombuffer(image_data, np.uint8)
            image = cv2.imdecode(np_array, cv2.IMREAD_COLOR)
            return image
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è base64: {e}")
            raise

    def detect_tools(self, image_base64: str, confidence_threshold: float = 0.5) -> Dict[str, Any]:
        """
        –û–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏
        
        Args:
            image_base64: –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ base64
            confidence_threshold: –ü–æ—Ä–æ–≥ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏ (0.0-1.0)
            
        Returns:
            –°–ª–æ–≤–∞—Ä—å —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –¥–µ—Ç–µ–∫—Ü–∏–∏
        """
        try:
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º base64 –≤ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            image = self.base64_to_image(image_base64)
            
            # –í—ã–ø–æ–ª–Ω—è–µ–º –¥–µ—Ç–µ–∫—Ü–∏—é
            results = self.model(image, conf=confidence_threshold, verbose=False)
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            detected_tools = []
            total_detected = 0
            
            for result in results:
                boxes = result.boxes
                if boxes is not None:
                    for box in boxes:
                        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –±–æ–∫—Å–∞
                        confidence = float(box.conf[0])
                        class_id = int(box.cls[0])
                        class_name = self.tool_classes.get(class_id, f"Unknown_{class_id}")
                        
                        # –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã bounding box
                        x1, y1, x2, y2 = map(int, box.xyxy[0])
                        
                        detected_tools.append({
                            "class_name": class_name,
                            "confidence": confidence * 100,  # –í –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö
                            "bounding_box": {
                                "x1": x1, "y1": y1, "x2": x2, "y2": y2
                            },
                            "detected_quantity": 1
                        })
                        
                        total_detected += 1
            
            # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –ø–æ –∫–ª–∞—Å—Å–∞–º –¥–ª—è –ø–æ–¥—Å—á–µ—Ç–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞
            tool_counts = {}
            for tool in detected_tools:
                class_name = tool["class_name"]
                if class_name in tool_counts:
                    tool_counts[class_name] += 1
                else:
                    tool_counts[class_name] = 1
            
            # –û–±–Ω–æ–≤–ª—è–µ–º detected_quantity –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞
            for tool in detected_tools:
                tool["detected_quantity"] = tool_counts[tool["class_name"]]
            
            # –£–±–∏—Ä–∞–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã, –æ—Å—Ç–∞–≤–ª—è—è —Ç–æ–ª—å–∫–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –∫–ª–∞—Å—Å—ã —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º
            unique_tools = []
            seen_classes = set()
            for tool in detected_tools:
                if tool["class_name"] not in seen_classes:
                    unique_tools.append(tool)
                    seen_classes.add(tool["class_name"])
            
            logger.info(f"üîç –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤: {total_detected}")
            
            return {
                "detected_tools": unique_tools,
                "total_detected": total_detected,
                "processing_time": results[0].speed.get('preprocess', 0) + 
                                  results[0].speed.get('inference', 0) + 
                                  results[0].speed.get('postprocess', 0),
                "success": True
            }
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –¥–µ—Ç–µ–∫—Ü–∏–∏: {e}")
            return {
                "detected_tools": [],
                "total_detected": 0,
                "processing_time": 0,
                "success": False,
                "error": str(e)
            }

    def get_available_tools(self) -> List[str]:
        """
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –¥–ª—è –¥–µ—Ç–µ–∫—Ü–∏–∏ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
        
        Returns:
            –°–ø–∏—Å–æ–∫ –Ω–∞–∑–≤–∞–Ω–∏–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
        """
        return list(self.tool_classes.values())

# –°–æ–∑–¥–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä —Å–µ—Ä–≤–∏—Å–∞
# –£–∫–∞–∂–∏—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø—É—Ç—å –∫ –≤–∞—à–µ–π –º–æ–¥–µ–ª–∏
MODEL_PATH = "/data/vscode/HacatonAeroflot/Aeroflot-project/src/aeroflot_project/models/best_tools_detection.pt"

try:
    detection_service = ToolDetectionService(MODEL_PATH)
    logger.info("‚úÖ –°–µ—Ä–≤–∏—Å –¥–µ—Ç–µ–∫—Ü–∏–∏ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
except Exception as e:
    logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Å–µ—Ä–≤–∏—Å –¥–µ—Ç–µ–∫—Ü–∏–∏: {e}")
    detection_service = None