# app/schemas/working_api.py
from fastapi import FastAPI, Depends, HTTPException, status
from fastapi.middleware.cors import CORSMiddleware
from fastapi.security import HTTPBearer
from sqlalchemy import create_engine, Column, Integer, String, DateTime, Boolean, ForeignKey
from sqlalchemy.orm import sessionmaker, Session, declarative_base
from sqlalchemy.sql import func
from datetime import datetime, timedelta
from jose import JWTError, jwt
from pydantic import BaseModel
from typing import Optional, List, Dict, Any
from contextlib import asynccontextmanager
import hashlib
import uvicorn
import uuid

# ===== –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø =====
SECRET_KEY = "your-secret-key-change-in-production"
ALGORITHM = "HS256"
ACCESS_TOKEN_EXPIRE_MINUTES = 30
DATABASE_URL = "sqlite:///./tools.db"



# ===== –ë–ê–ó–ê –î–ê–ù–ù–´–• =====
engine = create_engine(DATABASE_URL, connect_args={"check_same_thread": False})
SessionLocal = sessionmaker(autocommit=False, autoflush=False, bind=engine)
Base = declarative_base()

class User(Base):
    __tablename__ = "users"
    id = Column(Integer, primary_key=True, index=True)
    badge_id = Column(String, unique=True, index=True)
    full_name = Column(String)
    hashed_password = Column(String)
    is_active = Column(Boolean, default=True)
    is_superuser = Column(Boolean, default=False)

class Operation(Base):
    __tablename__ = "operations"
    id = Column(Integer, primary_key=True, index=True)
    user_id = Column(Integer, ForeignKey("users.id"))
    operation_type = Column(String)
    timestamp = Column(DateTime(timezone=True), server_default=func.now())
    status = Column(String, default="in_progress")
    session_id = Column(String)
    engineer_name = Column(String)

# ===== –ü–†–û–°–¢–û–ï –•–ï–®–ò–†–û–í–ê–ù–ò–ï (–±–µ–∑ bcrypt) =====
def hash_password(password: str) -> str:
    """–ü—Ä–æ—Å—Ç–æ–µ —Ö–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–∞—Ä–æ–ª—è –¥–ª—è –¥–µ–º–æ"""
    return hashlib.sha256(f"{password}{SECRET_KEY}".encode()).hexdigest()

def verify_password(plain_password: str, hashed_password: str) -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞—Ä–æ–ª—è"""
    return hash_password(plain_password) == hashed_password

def create_demo_data():
    """–°–æ–∑–¥–∞–µ—Ç –¥–µ–º–æ-–¥–∞–Ω–Ω—ã–µ –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –∑–∞–ø—É—Å–∫–µ"""
    db = SessionLocal()
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏
        if not db.query(User).first():
            demo_user = User(
                badge_id="demo",
                full_name="–î–µ–º–æ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å",
                hashed_password=hash_password("password"),
                is_active=True,
                is_superuser=False
            )
            admin_user = User(
                badge_id="admin", 
                full_name="–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –°–∏—Å—Ç–µ–º—ã",
                hashed_password=hash_password("admin"),
                is_active=True,
                is_superuser=True
            )
            db.add_all([demo_user, admin_user])
            db.commit()
            print("‚úÖ Demo data created successfully")
    except Exception as e:
        print(f"‚ùå Error creating demo data: {e}")
    finally:
        db.close()

# ===== LIFESPAN MANAGEMENT =====
@asynccontextmanager
async def lifespan(app: FastAPI):
    # Startup
    print("üîß Starting up...")
    Base.metadata.create_all(bind=engine)
    create_demo_data()
    yield
    # Shutdown
    print("üîß Shutting down...")

# ===== PYDANTIC –°–•–ï–ú–´ =====
class LoginRequest(BaseModel):
    badge_id: str
    password: str

class UserResponse(BaseModel):
    id: int
    badge_id: str
    full_name: str
    is_active: bool
    is_superuser: bool

    class Config:
        from_attributes = True

class Token(BaseModel):
    access_token: str
    token_type: str
    user: UserResponse

class OperationStartRequest(BaseModel):
    engineer_name: str
    operation_type: str
    operation_date: str
    user_id: int

class OperationConfirmRequest(BaseModel):
    session_id: str
    operation_date: str
    tools: List[Dict[str, Any]]

# ===== –ê–£–¢–ï–ù–¢–ò–§–ò–ö–ê–¶–ò–Ø =====
security = HTTPBearer()

def get_db():
    db = SessionLocal()
    try:
        yield db
    finally:
        db.close()

# ===== FASTAPI –ü–†–ò–õ–û–ñ–ï–ù–ò–ï =====
app = FastAPI(
    title="Tool Management System API",
    version="1.0.0",
    lifespan=lifespan
)

app.add_middleware(
    CORSMiddleware,
    allow_origins=["http://localhost:3000", "http://127.0.0.1:3000", "*"],
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

@app.post("/api/auth/login", response_model=Token)
async def login(login_data: LoginRequest, db: Session = Depends(get_db)):
    """–ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    print(f"üîê Login attempt: {login_data.badge_id}")
    
    user = db.query(User).filter(User.badge_id == login_data.badge_id).first()
    
    if not user:
        # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –¥–µ–º–æ
        if login_data.badge_id in ["demo", "admin"]:
            is_superuser = login_data.badge_id == "admin"
            full_name = "–î–µ–º–æ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å" if not is_superuser else "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –°–∏—Å—Ç–µ–º—ã"
            
            user = User(
                badge_id=login_data.badge_id,
                full_name=full_name,
                hashed_password=hash_password(login_data.password),
                is_superuser=is_superuser
            )
            db.add(user)
            db.commit()
            db.refresh(user)
            print(f"‚úÖ Created new user: {login_data.badge_id}")
        else:
            print(f"‚ùå Invalid credentials: {login_data.badge_id}")
            raise HTTPException(
                status_code=status.HTTP_401_UNAUTHORIZED,
                detail="Invalid badge ID or password"
            )
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–∞—Ä–æ–ª—å
    if not verify_password(login_data.password, user.hashed_password):
        print(f"‚ùå Invalid password for: {login_data.badge_id}")
        raise HTTPException(
            status_code=status.HTTP_401_UNAUTHORIZED,
            detail="Invalid badge ID or password"
        )
    
    # –°–æ–∑–¥–∞–µ–º —Ç–æ–∫–µ–Ω
    access_token_expires = timedelta(minutes=ACCESS_TOKEN_EXPIRE_MINUTES)
    access_token = jwt.encode(
        {
            "sub": user.badge_id,
            "exp": datetime.utcnow() + access_token_expires,
            "user_id": user.id
        },
        SECRET_KEY,
        algorithm=ALGORITHM
    )
    
    print(f"‚úÖ Login successful: {user.full_name}")
    
    return {
        "access_token": access_token,
        "token_type": "bearer",
        "user": UserResponse.from_orm(user)
    }

@app.post("/api/operations/start")
async def start_operation(operation_data: OperationStartRequest, db: Session = Depends(get_db)):
    """–ù–∞—á–∞–ª–æ –Ω–æ–≤–æ–π –æ–ø–µ—Ä–∞—Ü–∏–∏ —Å –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞–º–∏"""
    print(f"üîß Starting operation for engineer: {operation_data.engineer_name}")
    
    session_id = str(uuid.uuid4())
    
    operation = Operation(
        user_id=operation_data.user_id,
        operation_type=operation_data.operation_type,
        session_id=session_id,
        engineer_name=operation_data.engineer_name,
        status="in_progress"
    )
    
    db.add(operation)
    db.commit()
    db.refresh(operation)
    
    print(f"‚úÖ Operation started: {session_id}")
    
    return {
        "session_id": session_id,
        "operation_id": operation.id,
        "message": "Operation started successfully"
    }

@app.post("/api/operations/confirm")
async def confirm_operation(confirm_data: OperationConfirmRequest, db: Session = Depends(get_db)):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –æ–ø–µ—Ä–∞—Ü–∏–∏"""
    print(f"‚úÖ Confirming operation: {confirm_data.session_id}")
    
    operation = db.query(Operation).filter(Operation.session_id == confirm_data.session_id).first()
    
    if not operation:
        print(f"‚ùå Operation not found: {confirm_data.session_id}")
        raise HTTPException(status_code=404, detail="Operation not found")
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –æ–ø–µ—Ä–∞—Ü–∏–∏
    operation.status = "completed"
    db.commit()
    
    # –î–µ–º–æ-–¥–∞–Ω–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
    demoTools = [
        {"id": 1, "class_name": "–ú–æ–ª–æ—Ç–æ–∫", "confidence": 95.5, "detected_quantity": 1},
        {"id": 2, "class_name": "–û—Ç–≤–µ—Ä—Ç–∫–∞ –∫—Ä–µ—Å—Ç–æ–≤–∞—è", "confidence": 87.3, "detected_quantity": 2},
        {"id": 3, "class_name": "–ì–∞–µ—á–Ω—ã–π –∫–ª—é—á", "confidence": 92.1, "detected_quantity": 3},
        {"id": 4, "class_name": "–ü–ª–æ—Å–∫–æ–≥—É–±—Ü—ã", "confidence": 78.9, "detected_quantity": 1}
    ]
    
    print(f"‚úÖ Operation confirmed: {operation.id}")
    
    return {
        "message": "Operation confirmed successfully",
        "operation_id": operation.id,
        "tools": demoTools,
        "total_tools": len(demoTools),
        "match_percentage": 95.0
    }

@app.get("/api/users")
async def get_users(db: Session = Depends(get_db)):
    """–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è)"""
    users = db.query(User).all()
    return [UserResponse.from_orm(user) for user in users]

@app.get("/api/health")
async def health_check():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è API"""
    return {
        "status": "healthy", 
        "timestamp": datetime.now().isoformat(),
        "service": "Tool Management System API"
    }

@app.get("/")
async def read_root():
    """–ö–æ—Ä–Ω–µ–≤–æ–π endpoint"""
    return {
        "message": "Tool Management System API", 
        "version": "1.0.0",
        "endpoints": {
            "login": "POST /api/auth/login",
            "start_operation": "POST /api/operations/start", 
            "confirm_operation": "POST /api/operations/confirm",
            "health": "GET /api/health",
            "docs": "GET /docs"
        }
    }

if __name__ == "__main__":
    print("üöÄ Starting Tool Management System API")
    print("üìç URL: http://localhost:8000")
    print("üìö Documentation: http://localhost:8000/docs")
    print("üîß Health Check: http://localhost:8000/api/health")
    print("=" * 50)
    
    uvicorn.run(
        "working_api:app",
        host="0.0.0.0", 
        port=8000,
        reload=False
    )


# ===== RABOTAY S MODELY =====

try:
    from ml_service import detection_service
    ML_AVAILABLE = detection_service is not None
except ImportError:
    ML_AVAILABLE = False
    print("‚ö†Ô∏è ML service not available")

# –î–æ–±–∞–≤—å—Ç–µ –Ω–æ–≤—ã–π endpoint –¥–ª—è –¥–µ—Ç–µ–∫—Ü–∏–∏ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
@app.post("/api/ml/detect")
async def detect_tools(request: dict):
    """
    –û–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏ —Å –ø–æ–º–æ—â—å—é ML –º–æ–¥–µ–ª–∏
    """
    if not ML_AVAILABLE:
        raise HTTPException(
            status_code=503, 
            detail="ML service is not available"
        )
    
    try:
        image_base64 = request.get("image_base64", "")
        confidence_threshold = request.get("confidence_threshold", 0.5)
        
        if not image_base64:
            raise HTTPException(
                status_code=400, 
                detail="Image data is required"
            )
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º –¥–µ—Ç–µ–∫—Ü–∏—é
        results = detection_service.detect_tools(image_base64, confidence_threshold)
        
        return {
            "success": True,
            "results": results,
            "available_tools": detection_service.get_available_tools()
        }
        
    except Exception as e:
        logger.error(f"Error in tool detection: {e}")
        raise HTTPException(
            status_code=500, 
            detail=f"Detection failed: {str(e)}"
        )

@app.get("/api/ml/status")
async def get_ml_status():
    """
    –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ ML —Å–µ—Ä–≤–∏—Å–∞
    """
    return {
        "ml_available": ML_AVAILABLE,
        "available_tools": detection_service.get_available_tools() if ML_AVAILABLE else []
    }

# –û–±–Ω–æ–≤–∏—Ç–µ endpoint –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ–ø–µ—Ä–∞—Ü–∏–∏ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è ML
@app.post("/api/operations/confirm")
async def confirm_operation(confirm_data: dict, db: Session = Depends(get_db)):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –æ–ø–µ—Ä–∞—Ü–∏–∏ —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é ML –¥–µ—Ç–µ–∫—Ü–∏–∏"""
    print(f"‚úÖ Confirming operation: {confirm_data.get('session_id')}")
    
    operation = db.query(Operation).filter(
        Operation.session_id == confirm_data.get("session_id")
    ).first()
    
    if not operation:
        raise HTTPException(status_code=404, detail="Operation not found")
    
    # –ï—Å–ª–∏ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ, –∏—Å–ø–æ–ª—å–∑—É–µ–º ML –¥–ª—è –¥–µ—Ç–µ–∫—Ü–∏–∏
    image_base64 = confirm_data.get("image_base64")
    if image_base64 and ML_AVAILABLE:
        try:
            ml_results = detection_service.detect_tools(image_base64)
            if ml_results["success"]:
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã ML
                tools_data = ml_results["results"]["detected_tools"]
                print(f"üîç ML detected {len(tools_data)} tools")
            else:
                # Fallback –∫ –¥–µ–º–æ-–¥–∞–Ω–Ω—ã–º
                tools_data = get_demo_tools()
        except Exception as e:
            print(f"‚ö†Ô∏è ML detection failed, using demo data: {e}")
            tools_data = get_demo_tools()
    else:
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –¥–µ–º–æ-–¥–∞–Ω–Ω—ã–µ
        tools_data = get_demo_tools()
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –æ–ø–µ—Ä–∞—Ü–∏–∏
    operation.status = "completed"
    db.commit()
    
    return {
        "message": "Operation confirmed successfully",
        "operation_id": operation.id,
        "tools": tools_data,
        "total_tools": len(tools_data),
        "match_percentage": 95.0,
        "ml_used": image_base64 is not None and ML_AVAILABLE
    }

def get_demo_tools():
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –¥–µ–º–æ-–¥–∞–Ω–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤"""
    return [
        {"id": 1, "class_name": "–ú–æ–ª–æ—Ç–æ–∫", "confidence": 95.5, "detected_quantity": 1},
        {"id": 2, "class_name": "–û—Ç–≤–µ—Ä—Ç–∫–∞ –∫—Ä–µ—Å—Ç–æ–≤–∞—è", "confidence": 87.3, "detected_quantity": 2},
        {"id": 3, "class_name": "–ì–∞–µ—á–Ω—ã–π –∫–ª—é—á", "confidence": 92.1, "detected_quantity": 3},
        {"id": 4, "class_name": "–ü–ª–æ—Å–∫–æ–≥—É–±—Ü—ã", "confidence": 78.9, "detected_quantity": 1}
    ]